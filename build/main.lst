ARM GAS  C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.arch armv6s-m
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	MX_GPIO_Init:
  24              	.LFB44:
  25              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/main.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/main.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** /* USER CODE END Includes */
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* USER CODE END PTD */
  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
ARM GAS  C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s 			page 2


  34:Core/Src/main.c **** /* USER CODE BEGIN PD */
  35:Core/Src/main.c **** /* USER CODE END PD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  38:Core/Src/main.c **** /* USER CODE BEGIN PM */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* USER CODE END PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  43:Core/Src/main.c **** ADC_HandleTypeDef hadc;
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** TIM_HandleTypeDef htim1;
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** /* USER CODE BEGIN PV */
  48:Core/Src/main.c **** uint32_t adc1, adc2;
  49:Core/Src/main.c **** /* USER CODE END PV */
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  52:Core/Src/main.c **** void SystemClock_Config(void);
  53:Core/Src/main.c **** static void MX_GPIO_Init(void);
  54:Core/Src/main.c **** static void MX_ADC_Init(void);
  55:Core/Src/main.c **** static void MX_TIM1_Init(void);
  56:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  57:Core/Src/main.c **** 
  58:Core/Src/main.c **** /* USER CODE END PFP */
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  61:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  62:Core/Src/main.c **** 
  63:Core/Src/main.c **** /* USER CODE END 0 */
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** /**
  66:Core/Src/main.c ****   * @brief  The application entry point.
  67:Core/Src/main.c ****   * @retval int
  68:Core/Src/main.c ****   */
  69:Core/Src/main.c **** int main(void)
  70:Core/Src/main.c **** {
  71:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  72:Core/Src/main.c **** 
  73:Core/Src/main.c ****   /* USER CODE END 1 */
  74:Core/Src/main.c **** 
  75:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  76:Core/Src/main.c **** 
  77:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  78:Core/Src/main.c ****   HAL_Init();
  79:Core/Src/main.c **** 
  80:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  81:Core/Src/main.c **** 
  82:Core/Src/main.c ****   /* USER CODE END Init */
  83:Core/Src/main.c **** 
  84:Core/Src/main.c ****   /* Configure the system clock */
  85:Core/Src/main.c ****   SystemClock_Config();
  86:Core/Src/main.c **** 
  87:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  88:Core/Src/main.c **** 
  89:Core/Src/main.c ****   /* USER CODE END SysInit */
  90:Core/Src/main.c **** 
ARM GAS  C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s 			page 3


  91:Core/Src/main.c ****   /* Initialize all configured peripherals */
  92:Core/Src/main.c ****   MX_GPIO_Init();
  93:Core/Src/main.c ****   MX_ADC_Init();
  94:Core/Src/main.c ****   MX_TIM1_Init();
  95:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
  96:Core/Src/main.c **** 
  97:Core/Src/main.c ****   HAL_ADC_Start(&hadc);
  98:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim1);
  99:Core/Src/main.c ****   /* USER CODE END 2 */
 100:Core/Src/main.c **** 
 101:Core/Src/main.c ****   /* Infinite loop */
 102:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 103:Core/Src/main.c ****   while (1)
 104:Core/Src/main.c ****   {
 105:Core/Src/main.c ****     /* USER CODE END WHILE */
 106:Core/Src/main.c **** 
 107:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 108:Core/Src/main.c ****   }
 109:Core/Src/main.c ****   /* USER CODE END 3 */
 110:Core/Src/main.c **** }
 111:Core/Src/main.c **** 
 112:Core/Src/main.c **** /**
 113:Core/Src/main.c ****   * @brief System Clock Configuration
 114:Core/Src/main.c ****   * @retval None
 115:Core/Src/main.c ****   */
 116:Core/Src/main.c **** void SystemClock_Config(void)
 117:Core/Src/main.c **** {
 118:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 119:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 120:Core/Src/main.c **** 
 121:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 122:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 123:Core/Src/main.c ****   */
 124:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 125:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 126:Core/Src/main.c ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 127:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 128:Core/Src/main.c ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 129:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 130:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 131:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 132:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 133:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 134:Core/Src/main.c ****   {
 135:Core/Src/main.c ****     Error_Handler();
 136:Core/Src/main.c ****   }
 137:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 138:Core/Src/main.c ****   */
 139:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 140:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 141:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 142:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 143:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 144:Core/Src/main.c **** 
 145:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 146:Core/Src/main.c ****   {
 147:Core/Src/main.c ****     Error_Handler();
ARM GAS  C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s 			page 4


 148:Core/Src/main.c ****   }
 149:Core/Src/main.c **** }
 150:Core/Src/main.c **** 
 151:Core/Src/main.c **** /**
 152:Core/Src/main.c ****   * @brief ADC Initialization Function
 153:Core/Src/main.c ****   * @param None
 154:Core/Src/main.c ****   * @retval None
 155:Core/Src/main.c ****   */
 156:Core/Src/main.c **** static void MX_ADC_Init(void)
 157:Core/Src/main.c **** {
 158:Core/Src/main.c **** 
 159:Core/Src/main.c ****   /* USER CODE BEGIN ADC_Init 0 */
 160:Core/Src/main.c **** 
 161:Core/Src/main.c ****   /* USER CODE END ADC_Init 0 */
 162:Core/Src/main.c **** 
 163:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 164:Core/Src/main.c **** 
 165:Core/Src/main.c ****   /* USER CODE BEGIN ADC_Init 1 */
 166:Core/Src/main.c **** 
 167:Core/Src/main.c ****   /* USER CODE END ADC_Init 1 */
 168:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 169:Core/Src/main.c ****   */
 170:Core/Src/main.c ****   hadc.Instance = ADC1;
 171:Core/Src/main.c ****   hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 172:Core/Src/main.c ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
 173:Core/Src/main.c ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 174:Core/Src/main.c ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 175:Core/Src/main.c ****   hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 176:Core/Src/main.c ****   hadc.Init.LowPowerAutoWait = DISABLE;
 177:Core/Src/main.c ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 178:Core/Src/main.c ****   hadc.Init.ContinuousConvMode = ENABLE;
 179:Core/Src/main.c ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 180:Core/Src/main.c ****   hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 181:Core/Src/main.c ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 182:Core/Src/main.c ****   hadc.Init.DMAContinuousRequests = DISABLE;
 183:Core/Src/main.c ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 184:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc) != HAL_OK)
 185:Core/Src/main.c ****   {
 186:Core/Src/main.c ****     Error_Handler();
 187:Core/Src/main.c ****   }
 188:Core/Src/main.c ****   /** Configure for the selected ADC regular channel to be converted.
 189:Core/Src/main.c ****   */
 190:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_1;
 191:Core/Src/main.c ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 192:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 193:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 194:Core/Src/main.c ****   {
 195:Core/Src/main.c ****     Error_Handler();
 196:Core/Src/main.c ****   }
 197:Core/Src/main.c ****   /* USER CODE BEGIN ADC_Init 2 */
 198:Core/Src/main.c **** 
 199:Core/Src/main.c ****   /* USER CODE END ADC_Init 2 */
 200:Core/Src/main.c **** 
 201:Core/Src/main.c **** }
 202:Core/Src/main.c **** 
 203:Core/Src/main.c **** /**
 204:Core/Src/main.c ****   * @brief TIM1 Initialization Function
ARM GAS  C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s 			page 5


 205:Core/Src/main.c ****   * @param None
 206:Core/Src/main.c ****   * @retval None
 207:Core/Src/main.c ****   */
 208:Core/Src/main.c **** static void MX_TIM1_Init(void)
 209:Core/Src/main.c **** {
 210:Core/Src/main.c **** 
 211:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 0 */
 212:Core/Src/main.c **** 
 213:Core/Src/main.c ****   /* USER CODE END TIM1_Init 0 */
 214:Core/Src/main.c **** 
 215:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 216:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 217:Core/Src/main.c **** 
 218:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 1 */
 219:Core/Src/main.c **** 
 220:Core/Src/main.c ****   /* USER CODE END TIM1_Init 1 */
 221:Core/Src/main.c ****   htim1.Instance = TIM1;
 222:Core/Src/main.c ****   htim1.Init.Prescaler = 23999;
 223:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 224:Core/Src/main.c ****   htim1.Init.Period = 999;
 225:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 226:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 227:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 228:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 229:Core/Src/main.c ****   {
 230:Core/Src/main.c ****     Error_Handler();
 231:Core/Src/main.c ****   }
 232:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 233:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 234:Core/Src/main.c ****   {
 235:Core/Src/main.c ****     Error_Handler();
 236:Core/Src/main.c ****   }
 237:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 238:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 239:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 240:Core/Src/main.c ****   {
 241:Core/Src/main.c ****     Error_Handler();
 242:Core/Src/main.c ****   }
 243:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 2 */
 244:Core/Src/main.c **** 
 245:Core/Src/main.c ****   /* USER CODE END TIM1_Init 2 */
 246:Core/Src/main.c **** 
 247:Core/Src/main.c **** }
 248:Core/Src/main.c **** 
 249:Core/Src/main.c **** /**
 250:Core/Src/main.c ****   * @brief GPIO Initialization Function
 251:Core/Src/main.c ****   * @param None
 252:Core/Src/main.c ****   * @retval None
 253:Core/Src/main.c ****   */
 254:Core/Src/main.c **** static void MX_GPIO_Init(void)
 255:Core/Src/main.c **** {
  26              		.loc 1 255 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 32
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  31              	.LCFI0:
ARM GAS  C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s 			page 6


  32              		.cfi_def_cfa_offset 20
  33              		.cfi_offset 4, -20
  34              		.cfi_offset 5, -16
  35              		.cfi_offset 6, -12
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 89B0     		sub	sp, sp, #36
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 56
 256:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 256 3 view .LVU1
  42              		.loc 1 256 20 is_stmt 0 view .LVU2
  43 0004 1422     		movs	r2, #20
  44 0006 0021     		movs	r1, #0
  45 0008 03A8     		add	r0, sp, #12
  46 000a FFF7FEFF 		bl	memset
  47              	.LVL0:
 257:Core/Src/main.c **** 
 258:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 259:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  48              		.loc 1 259 3 is_stmt 1 view .LVU3
  49              	.LBB4:
  50              		.loc 1 259 3 view .LVU4
  51              		.loc 1 259 3 view .LVU5
  52 000e 184B     		ldr	r3, .L2
  53 0010 5969     		ldr	r1, [r3, #20]
  54 0012 8020     		movs	r0, #128
  55 0014 8002     		lsls	r0, r0, #10
  56 0016 0143     		orrs	r1, r0
  57 0018 5961     		str	r1, [r3, #20]
  58              		.loc 1 259 3 view .LVU6
  59 001a 5A69     		ldr	r2, [r3, #20]
  60 001c 0240     		ands	r2, r0
  61 001e 0192     		str	r2, [sp, #4]
  62              		.loc 1 259 3 view .LVU7
  63 0020 019A     		ldr	r2, [sp, #4]
  64              	.LBE4:
  65              		.loc 1 259 3 view .LVU8
 260:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  66              		.loc 1 260 3 view .LVU9
  67              	.LBB5:
  68              		.loc 1 260 3 view .LVU10
  69              		.loc 1 260 3 view .LVU11
  70 0022 5A69     		ldr	r2, [r3, #20]
  71 0024 8021     		movs	r1, #128
  72 0026 0903     		lsls	r1, r1, #12
  73 0028 0A43     		orrs	r2, r1
  74 002a 5A61     		str	r2, [r3, #20]
  75              		.loc 1 260 3 view .LVU12
  76 002c 5B69     		ldr	r3, [r3, #20]
  77 002e 0B40     		ands	r3, r1
  78 0030 0293     		str	r3, [sp, #8]
  79              		.loc 1 260 3 view .LVU13
  80 0032 029B     		ldr	r3, [sp, #8]
  81              	.LBE5:
  82              		.loc 1 260 3 view .LVU14
 261:Core/Src/main.c **** 
ARM GAS  C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s 			page 7


 262:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 263:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
  83              		.loc 1 263 3 view .LVU15
  84 0034 C027     		movs	r7, #192
  85 0036 BF00     		lsls	r7, r7, #2
  86 0038 0E4D     		ldr	r5, .L2+4
  87 003a 0022     		movs	r2, #0
  88 003c 3900     		movs	r1, r7
  89 003e 2800     		movs	r0, r5
  90 0040 FFF7FEFF 		bl	HAL_GPIO_WritePin
  91              	.LVL1:
 264:Core/Src/main.c **** 
 265:Core/Src/main.c ****   /*Configure GPIO pin : B1_Pin */
 266:Core/Src/main.c ****   GPIO_InitStruct.Pin = B1_Pin;
  92              		.loc 1 266 3 view .LVU16
  93              		.loc 1 266 23 is_stmt 0 view .LVU17
  94 0044 0126     		movs	r6, #1
  95 0046 0396     		str	r6, [sp, #12]
 267:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  96              		.loc 1 267 3 is_stmt 1 view .LVU18
  97              		.loc 1 267 24 is_stmt 0 view .LVU19
  98 0048 9023     		movs	r3, #144
  99 004a 5B03     		lsls	r3, r3, #13
 100 004c 0493     		str	r3, [sp, #16]
 268:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 101              		.loc 1 268 3 is_stmt 1 view .LVU20
 102              		.loc 1 268 24 is_stmt 0 view .LVU21
 103 004e 0024     		movs	r4, #0
 104 0050 0594     		str	r4, [sp, #20]
 269:Core/Src/main.c ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 105              		.loc 1 269 3 is_stmt 1 view .LVU22
 106 0052 9020     		movs	r0, #144
 107 0054 03A9     		add	r1, sp, #12
 108 0056 C005     		lsls	r0, r0, #23
 109 0058 FFF7FEFF 		bl	HAL_GPIO_Init
 110              	.LVL2:
 270:Core/Src/main.c **** 
 271:Core/Src/main.c ****   /*Configure GPIO pins : LD4_Pin LD3_Pin */
 272:Core/Src/main.c ****   GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 111              		.loc 1 272 3 view .LVU23
 112              		.loc 1 272 23 is_stmt 0 view .LVU24
 113 005c 0397     		str	r7, [sp, #12]
 273:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 114              		.loc 1 273 3 is_stmt 1 view .LVU25
 115              		.loc 1 273 24 is_stmt 0 view .LVU26
 116 005e 0496     		str	r6, [sp, #16]
 274:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 117              		.loc 1 274 3 is_stmt 1 view .LVU27
 118              		.loc 1 274 24 is_stmt 0 view .LVU28
 119 0060 0594     		str	r4, [sp, #20]
 275:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 120              		.loc 1 275 3 is_stmt 1 view .LVU29
 121              		.loc 1 275 25 is_stmt 0 view .LVU30
 122 0062 0694     		str	r4, [sp, #24]
 276:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 123              		.loc 1 276 3 is_stmt 1 view .LVU31
 124 0064 03A9     		add	r1, sp, #12
ARM GAS  C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s 			page 8


 125 0066 2800     		movs	r0, r5
 126 0068 FFF7FEFF 		bl	HAL_GPIO_Init
 127              	.LVL3:
 277:Core/Src/main.c **** 
 278:Core/Src/main.c **** }
 128              		.loc 1 278 1 is_stmt 0 view .LVU32
 129 006c 09B0     		add	sp, sp, #36
 130              		@ sp needed
 131 006e F0BD     		pop	{r4, r5, r6, r7, pc}
 132              	.L3:
 133              		.align	2
 134              	.L2:
 135 0070 00100240 		.word	1073876992
 136 0074 00080048 		.word	1207961600
 137              		.cfi_endproc
 138              	.LFE44:
 140              		.section	.text.erdem,"ax",%progbits
 141              		.align	1
 142              		.global	erdem
 143              		.syntax unified
 144              		.code	16
 145              		.thumb_func
 146              		.fpu softvfp
 148              	erdem:
 149              	.LVL4:
 150              	.LFB45:
 279:Core/Src/main.c **** 
 280:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 281:Core/Src/main.c **** void erdem(int time)
 282:Core/Src/main.c **** {
 151              		.loc 1 282 1 is_stmt 1 view -0
 152              		.cfi_startproc
 153              		@ args = 0, pretend = 0, frame = 0
 154              		@ frame_needed = 0, uses_anonymous_args = 0
 155              		.loc 1 282 1 is_stmt 0 view .LVU34
 156 0000 10B5     		push	{r4, lr}
 157              	.LCFI2:
 158              		.cfi_def_cfa_offset 8
 159              		.cfi_offset 4, -8
 160              		.cfi_offset 14, -4
 283:Core/Src/main.c ****   HAL_GPIO_TogglePin(GPIOC, LD4_Pin);
 161              		.loc 1 283 3 is_stmt 1 view .LVU35
 162 0002 8021     		movs	r1, #128
 163 0004 4900     		lsls	r1, r1, #1
 164 0006 0248     		ldr	r0, .L5
 165              	.LVL5:
 166              		.loc 1 283 3 is_stmt 0 view .LVU36
 167 0008 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 168              	.LVL6:
 284:Core/Src/main.c ****   // HAL_GPIO_WritePin(GPIOC, LD4_Pin, GPIO_PIN_SET);
 285:Core/Src/main.c ****   // HAL_Delay(time);
 286:Core/Src/main.c ****   // HAL_GPIO_WritePin(GPIOC, LD4_Pin, GPIO_PIN_RESET);
 287:Core/Src/main.c ****   // HAL_Delay(time);
 288:Core/Src/main.c **** }
 169              		.loc 1 288 1 view .LVU37
 170              		@ sp needed
 171 000c 10BD     		pop	{r4, pc}
ARM GAS  C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s 			page 9


 172              	.L6:
 173 000e C046     		.align	2
 174              	.L5:
 175 0010 00080048 		.word	1207961600
 176              		.cfi_endproc
 177              	.LFE45:
 179              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 180              		.align	1
 181              		.global	HAL_TIM_PeriodElapsedCallback
 182              		.syntax unified
 183              		.code	16
 184              		.thumb_func
 185              		.fpu softvfp
 187              	HAL_TIM_PeriodElapsedCallback:
 188              	.LVL7:
 189              	.LFB46:
 289:Core/Src/main.c **** 
 290:Core/Src/main.c **** // Timer kod
 291:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 292:Core/Src/main.c **** {
 190              		.loc 1 292 1 is_stmt 1 view -0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 0
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194              		.loc 1 292 1 is_stmt 0 view .LVU39
 195 0000 10B5     		push	{r4, lr}
 196              	.LCFI3:
 197              		.cfi_def_cfa_offset 8
 198              		.cfi_offset 4, -8
 199              		.cfi_offset 14, -4
 293:Core/Src/main.c ****   if(TIM1 == htim -> Instance)
 200              		.loc 1 293 3 is_stmt 1 view .LVU40
 201              		.loc 1 293 19 is_stmt 0 view .LVU41
 202 0002 0268     		ldr	r2, [r0]
 203              		.loc 1 293 5 view .LVU42
 204 0004 054B     		ldr	r3, .L10
 205 0006 9A42     		cmp	r2, r3
 206 0008 00D0     		beq	.L9
 207              	.LVL8:
 208              	.L7:
 294:Core/Src/main.c ****   {
 295:Core/Src/main.c ****     adc1 = HAL_ADC_GetValue(&hadc);
 296:Core/Src/main.c ****     erdem(adc1);
 297:Core/Src/main.c ****   }
 298:Core/Src/main.c **** }
 209              		.loc 1 298 1 view .LVU43
 210              		@ sp needed
 211 000a 10BD     		pop	{r4, pc}
 212              	.LVL9:
 213              	.L9:
 295:Core/Src/main.c ****     erdem(adc1);
 214              		.loc 1 295 5 is_stmt 1 view .LVU44
 295:Core/Src/main.c ****     erdem(adc1);
 215              		.loc 1 295 12 is_stmt 0 view .LVU45
 216 000c 0448     		ldr	r0, .L10+4
 217              	.LVL10:
 295:Core/Src/main.c ****     erdem(adc1);
ARM GAS  C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s 			page 10


 218              		.loc 1 295 12 view .LVU46
 219 000e FFF7FEFF 		bl	HAL_ADC_GetValue
 220              	.LVL11:
 295:Core/Src/main.c ****     erdem(adc1);
 221              		.loc 1 295 10 view .LVU47
 222 0012 044B     		ldr	r3, .L10+8
 223 0014 1860     		str	r0, [r3]
 296:Core/Src/main.c ****   }
 224              		.loc 1 296 5 is_stmt 1 view .LVU48
 225 0016 FFF7FEFF 		bl	erdem
 226              	.LVL12:
 227              		.loc 1 298 1 is_stmt 0 view .LVU49
 228 001a F6E7     		b	.L7
 229              	.L11:
 230              		.align	2
 231              	.L10:
 232 001c 002C0140 		.word	1073818624
 233 0020 00000000 		.word	.LANCHOR0
 234 0024 00000000 		.word	.LANCHOR1
 235              		.cfi_endproc
 236              	.LFE46:
 238              		.section	.text.Error_Handler,"ax",%progbits
 239              		.align	1
 240              		.global	Error_Handler
 241              		.syntax unified
 242              		.code	16
 243              		.thumb_func
 244              		.fpu softvfp
 246              	Error_Handler:
 247              	.LFB47:
 299:Core/Src/main.c **** /* USER CODE END 4 */
 300:Core/Src/main.c **** 
 301:Core/Src/main.c **** /**
 302:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 303:Core/Src/main.c ****   * @retval None
 304:Core/Src/main.c ****   */
 305:Core/Src/main.c **** void Error_Handler(void)
 306:Core/Src/main.c **** {
 248              		.loc 1 306 1 is_stmt 1 view -0
 249              		.cfi_startproc
 250              		@ Volatile: function does not return.
 251              		@ args = 0, pretend = 0, frame = 0
 252              		@ frame_needed = 0, uses_anonymous_args = 0
 253              		@ link register save eliminated.
 307:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 308:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 309:Core/Src/main.c ****   __disable_irq();
 254              		.loc 1 309 3 view .LVU51
 255              	.LBB6:
 256              	.LBI6:
 257              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
ARM GAS  C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s 			page 11


   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s 			page 12


  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
ARM GAS  C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s 			page 13


 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 258              		.loc 2 140 27 view .LVU52
 259              	.LBB7:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 260              		.loc 2 142 3 view .LVU53
 261              		.syntax divided
 262              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 263 0000 72B6     		cpsid i
 264              	@ 0 "" 2
 265              		.thumb
 266              		.syntax unified
 267              	.L13:
 268              	.LBE7:
 269              	.LBE6:
 310:Core/Src/main.c ****   while (1)
 270              		.loc 1 310 3 discriminator 1 view .LVU54
 311:Core/Src/main.c ****   {
 312:Core/Src/main.c ****   }
 271              		.loc 1 312 3 discriminator 1 view .LVU55
 310:Core/Src/main.c ****   while (1)
 272              		.loc 1 310 9 discriminator 1 view .LVU56
 273 0002 FEE7     		b	.L13
 274              		.cfi_endproc
 275              	.LFE47:
 277              		.section	.text.MX_ADC_Init,"ax",%progbits
 278              		.align	1
 279              		.syntax unified
 280              		.code	16
 281              		.thumb_func
 282              		.fpu softvfp
 284              	MX_ADC_Init:
 285              	.LFB42:
 157:Core/Src/main.c **** 
 286              		.loc 1 157 1 view -0
 287              		.cfi_startproc
 288              		@ args = 0, pretend = 0, frame = 16
 289              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s 			page 14


 290 0000 00B5     		push	{lr}
 291              	.LCFI4:
 292              		.cfi_def_cfa_offset 4
 293              		.cfi_offset 14, -4
 294 0002 85B0     		sub	sp, sp, #20
 295              	.LCFI5:
 296              		.cfi_def_cfa_offset 24
 163:Core/Src/main.c **** 
 297              		.loc 1 163 3 view .LVU58
 163:Core/Src/main.c **** 
 298              		.loc 1 163 26 is_stmt 0 view .LVU59
 299 0004 0C22     		movs	r2, #12
 300 0006 0021     		movs	r1, #0
 301 0008 01A8     		add	r0, sp, #4
 302 000a FFF7FEFF 		bl	memset
 303              	.LVL13:
 170:Core/Src/main.c ****   hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 304              		.loc 1 170 3 is_stmt 1 view .LVU60
 170:Core/Src/main.c ****   hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 305              		.loc 1 170 17 is_stmt 0 view .LVU61
 306 000e 1748     		ldr	r0, .L19
 307 0010 174B     		ldr	r3, .L19+4
 308 0012 0360     		str	r3, [r0]
 171:Core/Src/main.c ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
 309              		.loc 1 171 3 is_stmt 1 view .LVU62
 171:Core/Src/main.c ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
 310              		.loc 1 171 28 is_stmt 0 view .LVU63
 311 0014 0023     		movs	r3, #0
 312 0016 4360     		str	r3, [r0, #4]
 172:Core/Src/main.c ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 313              		.loc 1 172 3 is_stmt 1 view .LVU64
 172:Core/Src/main.c ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 314              		.loc 1 172 24 is_stmt 0 view .LVU65
 315 0018 8360     		str	r3, [r0, #8]
 173:Core/Src/main.c ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 316              		.loc 1 173 3 is_stmt 1 view .LVU66
 173:Core/Src/main.c ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 317              		.loc 1 173 23 is_stmt 0 view .LVU67
 318 001a C360     		str	r3, [r0, #12]
 174:Core/Src/main.c ****   hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 319              		.loc 1 174 3 is_stmt 1 view .LVU68
 174:Core/Src/main.c ****   hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 320              		.loc 1 174 26 is_stmt 0 view .LVU69
 321 001c 0122     		movs	r2, #1
 322 001e 0261     		str	r2, [r0, #16]
 175:Core/Src/main.c ****   hadc.Init.LowPowerAutoWait = DISABLE;
 323              		.loc 1 175 3 is_stmt 1 view .LVU70
 175:Core/Src/main.c ****   hadc.Init.LowPowerAutoWait = DISABLE;
 324              		.loc 1 175 26 is_stmt 0 view .LVU71
 325 0020 0421     		movs	r1, #4
 326 0022 4161     		str	r1, [r0, #20]
 176:Core/Src/main.c ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 327              		.loc 1 176 3 is_stmt 1 view .LVU72
 176:Core/Src/main.c ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 328              		.loc 1 176 30 is_stmt 0 view .LVU73
 329 0024 0376     		strb	r3, [r0, #24]
 177:Core/Src/main.c ****   hadc.Init.ContinuousConvMode = ENABLE;
ARM GAS  C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s 			page 15


 330              		.loc 1 177 3 is_stmt 1 view .LVU74
 177:Core/Src/main.c ****   hadc.Init.ContinuousConvMode = ENABLE;
 331              		.loc 1 177 34 is_stmt 0 view .LVU75
 332 0026 4376     		strb	r3, [r0, #25]
 178:Core/Src/main.c ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 333              		.loc 1 178 3 is_stmt 1 view .LVU76
 178:Core/Src/main.c ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 334              		.loc 1 178 32 is_stmt 0 view .LVU77
 335 0028 8276     		strb	r2, [r0, #26]
 179:Core/Src/main.c ****   hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 336              		.loc 1 179 3 is_stmt 1 view .LVU78
 179:Core/Src/main.c ****   hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 337              		.loc 1 179 35 is_stmt 0 view .LVU79
 338 002a C376     		strb	r3, [r0, #27]
 180:Core/Src/main.c ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 339              		.loc 1 180 3 is_stmt 1 view .LVU80
 180:Core/Src/main.c ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 340              		.loc 1 180 30 is_stmt 0 view .LVU81
 341 002c C221     		movs	r1, #194
 342 002e FF31     		adds	r1, r1, #255
 343 0030 C161     		str	r1, [r0, #28]
 181:Core/Src/main.c ****   hadc.Init.DMAContinuousRequests = DISABLE;
 344              		.loc 1 181 3 is_stmt 1 view .LVU82
 181:Core/Src/main.c ****   hadc.Init.DMAContinuousRequests = DISABLE;
 345              		.loc 1 181 34 is_stmt 0 view .LVU83
 346 0032 0362     		str	r3, [r0, #32]
 182:Core/Src/main.c ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 347              		.loc 1 182 3 is_stmt 1 view .LVU84
 182:Core/Src/main.c ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 348              		.loc 1 182 35 is_stmt 0 view .LVU85
 349 0034 9E39     		subs	r1, r1, #158
 350 0036 FF39     		subs	r1, r1, #255
 351 0038 4354     		strb	r3, [r0, r1]
 183:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc) != HAL_OK)
 352              		.loc 1 183 3 is_stmt 1 view .LVU86
 183:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc) != HAL_OK)
 353              		.loc 1 183 21 is_stmt 0 view .LVU87
 354 003a 8262     		str	r2, [r0, #40]
 184:Core/Src/main.c ****   {
 355              		.loc 1 184 3 is_stmt 1 view .LVU88
 184:Core/Src/main.c ****   {
 356              		.loc 1 184 7 is_stmt 0 view .LVU89
 357 003c FFF7FEFF 		bl	HAL_ADC_Init
 358              	.LVL14:
 184:Core/Src/main.c ****   {
 359              		.loc 1 184 6 view .LVU90
 360 0040 0028     		cmp	r0, #0
 361 0042 0FD1     		bne	.L17
 190:Core/Src/main.c ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 362              		.loc 1 190 3 is_stmt 1 view .LVU91
 190:Core/Src/main.c ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 363              		.loc 1 190 19 is_stmt 0 view .LVU92
 364 0044 0123     		movs	r3, #1
 365 0046 0193     		str	r3, [sp, #4]
 191:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 366              		.loc 1 191 3 is_stmt 1 view .LVU93
 191:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
ARM GAS  C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s 			page 16


 367              		.loc 1 191 16 is_stmt 0 view .LVU94
 368 0048 8023     		movs	r3, #128
 369 004a 5B01     		lsls	r3, r3, #5
 370 004c 0293     		str	r3, [sp, #8]
 192:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 371              		.loc 1 192 3 is_stmt 1 view .LVU95
 192:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 372              		.loc 1 192 24 is_stmt 0 view .LVU96
 373 004e 8023     		movs	r3, #128
 374 0050 5B05     		lsls	r3, r3, #21
 375 0052 0393     		str	r3, [sp, #12]
 193:Core/Src/main.c ****   {
 376              		.loc 1 193 3 is_stmt 1 view .LVU97
 193:Core/Src/main.c ****   {
 377              		.loc 1 193 7 is_stmt 0 view .LVU98
 378 0054 01A9     		add	r1, sp, #4
 379 0056 0548     		ldr	r0, .L19
 380 0058 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 381              	.LVL15:
 193:Core/Src/main.c ****   {
 382              		.loc 1 193 6 view .LVU99
 383 005c 0028     		cmp	r0, #0
 384 005e 03D1     		bne	.L18
 201:Core/Src/main.c **** 
 385              		.loc 1 201 1 view .LVU100
 386 0060 05B0     		add	sp, sp, #20
 387              		@ sp needed
 388 0062 00BD     		pop	{pc}
 389              	.L17:
 186:Core/Src/main.c ****   }
 390              		.loc 1 186 5 is_stmt 1 view .LVU101
 391 0064 FFF7FEFF 		bl	Error_Handler
 392              	.LVL16:
 393              	.L18:
 195:Core/Src/main.c ****   }
 394              		.loc 1 195 5 view .LVU102
 395 0068 FFF7FEFF 		bl	Error_Handler
 396              	.LVL17:
 397              	.L20:
 398              		.align	2
 399              	.L19:
 400 006c 00000000 		.word	.LANCHOR0
 401 0070 00240140 		.word	1073816576
 402              		.cfi_endproc
 403              	.LFE42:
 405              		.section	.text.MX_TIM1_Init,"ax",%progbits
 406              		.align	1
 407              		.syntax unified
 408              		.code	16
 409              		.thumb_func
 410              		.fpu softvfp
 412              	MX_TIM1_Init:
 413              	.LFB43:
 209:Core/Src/main.c **** 
 414              		.loc 1 209 1 view -0
 415              		.cfi_startproc
 416              		@ args = 0, pretend = 0, frame = 24
ARM GAS  C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s 			page 17


 417              		@ frame_needed = 0, uses_anonymous_args = 0
 418 0000 00B5     		push	{lr}
 419              	.LCFI6:
 420              		.cfi_def_cfa_offset 4
 421              		.cfi_offset 14, -4
 422 0002 87B0     		sub	sp, sp, #28
 423              	.LCFI7:
 424              		.cfi_def_cfa_offset 32
 215:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 425              		.loc 1 215 3 view .LVU104
 215:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 426              		.loc 1 215 26 is_stmt 0 view .LVU105
 427 0004 1022     		movs	r2, #16
 428 0006 0021     		movs	r1, #0
 429 0008 02A8     		add	r0, sp, #8
 430 000a FFF7FEFF 		bl	memset
 431              	.LVL18:
 216:Core/Src/main.c **** 
 432              		.loc 1 216 3 is_stmt 1 view .LVU106
 216:Core/Src/main.c **** 
 433              		.loc 1 216 27 is_stmt 0 view .LVU107
 434 000e 0822     		movs	r2, #8
 435 0010 0021     		movs	r1, #0
 436 0012 6846     		mov	r0, sp
 437 0014 FFF7FEFF 		bl	memset
 438              	.LVL19:
 221:Core/Src/main.c ****   htim1.Init.Prescaler = 23999;
 439              		.loc 1 221 3 is_stmt 1 view .LVU108
 221:Core/Src/main.c ****   htim1.Init.Prescaler = 23999;
 440              		.loc 1 221 18 is_stmt 0 view .LVU109
 441 0018 1548     		ldr	r0, .L28
 442 001a 164B     		ldr	r3, .L28+4
 443 001c 0360     		str	r3, [r0]
 222:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 444              		.loc 1 222 3 is_stmt 1 view .LVU110
 222:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 445              		.loc 1 222 24 is_stmt 0 view .LVU111
 446 001e 164B     		ldr	r3, .L28+8
 447 0020 4360     		str	r3, [r0, #4]
 223:Core/Src/main.c ****   htim1.Init.Period = 999;
 448              		.loc 1 223 3 is_stmt 1 view .LVU112
 223:Core/Src/main.c ****   htim1.Init.Period = 999;
 449              		.loc 1 223 26 is_stmt 0 view .LVU113
 450 0022 0023     		movs	r3, #0
 451 0024 8360     		str	r3, [r0, #8]
 224:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 452              		.loc 1 224 3 is_stmt 1 view .LVU114
 224:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 453              		.loc 1 224 21 is_stmt 0 view .LVU115
 454 0026 154A     		ldr	r2, .L28+12
 455 0028 C260     		str	r2, [r0, #12]
 225:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 456              		.loc 1 225 3 is_stmt 1 view .LVU116
 225:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 457              		.loc 1 225 28 is_stmt 0 view .LVU117
 458 002a 0361     		str	r3, [r0, #16]
 226:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
ARM GAS  C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s 			page 18


 459              		.loc 1 226 3 is_stmt 1 view .LVU118
 226:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 460              		.loc 1 226 32 is_stmt 0 view .LVU119
 461 002c 4361     		str	r3, [r0, #20]
 227:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 462              		.loc 1 227 3 is_stmt 1 view .LVU120
 227:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 463              		.loc 1 227 32 is_stmt 0 view .LVU121
 464 002e 8033     		adds	r3, r3, #128
 465 0030 8361     		str	r3, [r0, #24]
 228:Core/Src/main.c ****   {
 466              		.loc 1 228 3 is_stmt 1 view .LVU122
 228:Core/Src/main.c ****   {
 467              		.loc 1 228 7 is_stmt 0 view .LVU123
 468 0032 FFF7FEFF 		bl	HAL_TIM_Base_Init
 469              	.LVL20:
 228:Core/Src/main.c ****   {
 470              		.loc 1 228 6 view .LVU124
 471 0036 0028     		cmp	r0, #0
 472 0038 14D1     		bne	.L25
 232:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 473              		.loc 1 232 3 is_stmt 1 view .LVU125
 232:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 474              		.loc 1 232 34 is_stmt 0 view .LVU126
 475 003a 8023     		movs	r3, #128
 476 003c 5B01     		lsls	r3, r3, #5
 477 003e 0293     		str	r3, [sp, #8]
 233:Core/Src/main.c ****   {
 478              		.loc 1 233 3 is_stmt 1 view .LVU127
 233:Core/Src/main.c ****   {
 479              		.loc 1 233 7 is_stmt 0 view .LVU128
 480 0040 02A9     		add	r1, sp, #8
 481 0042 0B48     		ldr	r0, .L28
 482 0044 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 483              	.LVL21:
 233:Core/Src/main.c ****   {
 484              		.loc 1 233 6 view .LVU129
 485 0048 0028     		cmp	r0, #0
 486 004a 0DD1     		bne	.L26
 237:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 487              		.loc 1 237 3 is_stmt 1 view .LVU130
 237:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 488              		.loc 1 237 37 is_stmt 0 view .LVU131
 489 004c 2023     		movs	r3, #32
 490 004e 0093     		str	r3, [sp]
 238:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 491              		.loc 1 238 3 is_stmt 1 view .LVU132
 238:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 492              		.loc 1 238 33 is_stmt 0 view .LVU133
 493 0050 0023     		movs	r3, #0
 494 0052 0193     		str	r3, [sp, #4]
 239:Core/Src/main.c ****   {
 495              		.loc 1 239 3 is_stmt 1 view .LVU134
 239:Core/Src/main.c ****   {
 496              		.loc 1 239 7 is_stmt 0 view .LVU135
 497 0054 6946     		mov	r1, sp
 498 0056 0648     		ldr	r0, .L28
ARM GAS  C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s 			page 19


 499 0058 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 500              	.LVL22:
 239:Core/Src/main.c ****   {
 501              		.loc 1 239 6 view .LVU136
 502 005c 0028     		cmp	r0, #0
 503 005e 05D1     		bne	.L27
 247:Core/Src/main.c **** 
 504              		.loc 1 247 1 view .LVU137
 505 0060 07B0     		add	sp, sp, #28
 506              		@ sp needed
 507 0062 00BD     		pop	{pc}
 508              	.L25:
 230:Core/Src/main.c ****   }
 509              		.loc 1 230 5 is_stmt 1 view .LVU138
 510 0064 FFF7FEFF 		bl	Error_Handler
 511              	.LVL23:
 512              	.L26:
 235:Core/Src/main.c ****   }
 513              		.loc 1 235 5 view .LVU139
 514 0068 FFF7FEFF 		bl	Error_Handler
 515              	.LVL24:
 516              	.L27:
 241:Core/Src/main.c ****   }
 517              		.loc 1 241 5 view .LVU140
 518 006c FFF7FEFF 		bl	Error_Handler
 519              	.LVL25:
 520              	.L29:
 521              		.align	2
 522              	.L28:
 523 0070 00000000 		.word	.LANCHOR2
 524 0074 002C0140 		.word	1073818624
 525 0078 BF5D0000 		.word	23999
 526 007c E7030000 		.word	999
 527              		.cfi_endproc
 528              	.LFE43:
 530              		.section	.text.SystemClock_Config,"ax",%progbits
 531              		.align	1
 532              		.global	SystemClock_Config
 533              		.syntax unified
 534              		.code	16
 535              		.thumb_func
 536              		.fpu softvfp
 538              	SystemClock_Config:
 539              	.LFB41:
 117:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 540              		.loc 1 117 1 view -0
 541              		.cfi_startproc
 542              		@ args = 0, pretend = 0, frame = 64
 543              		@ frame_needed = 0, uses_anonymous_args = 0
 544 0000 10B5     		push	{r4, lr}
 545              	.LCFI8:
 546              		.cfi_def_cfa_offset 8
 547              		.cfi_offset 4, -8
 548              		.cfi_offset 14, -4
 549 0002 90B0     		sub	sp, sp, #64
 550              	.LCFI9:
 551              		.cfi_def_cfa_offset 72
ARM GAS  C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s 			page 20


 118:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 552              		.loc 1 118 3 view .LVU142
 118:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 553              		.loc 1 118 22 is_stmt 0 view .LVU143
 554 0004 3022     		movs	r2, #48
 555 0006 0021     		movs	r1, #0
 556 0008 04A8     		add	r0, sp, #16
 557 000a FFF7FEFF 		bl	memset
 558              	.LVL26:
 119:Core/Src/main.c **** 
 559              		.loc 1 119 3 is_stmt 1 view .LVU144
 119:Core/Src/main.c **** 
 560              		.loc 1 119 22 is_stmt 0 view .LVU145
 561 000e 1024     		movs	r4, #16
 562 0010 1022     		movs	r2, #16
 563 0012 0021     		movs	r1, #0
 564 0014 6846     		mov	r0, sp
 565 0016 FFF7FEFF 		bl	memset
 566              	.LVL27:
 124:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 567              		.loc 1 124 3 is_stmt 1 view .LVU146
 124:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 568              		.loc 1 124 36 is_stmt 0 view .LVU147
 569 001a 1223     		movs	r3, #18
 570 001c 0493     		str	r3, [sp, #16]
 125:Core/Src/main.c ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 571              		.loc 1 125 3 is_stmt 1 view .LVU148
 125:Core/Src/main.c ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 572              		.loc 1 125 30 is_stmt 0 view .LVU149
 573 001e 113B     		subs	r3, r3, #17
 574 0020 0793     		str	r3, [sp, #28]
 126:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 575              		.loc 1 126 3 is_stmt 1 view .LVU150
 126:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 576              		.loc 1 126 32 is_stmt 0 view .LVU151
 577 0022 0993     		str	r3, [sp, #36]
 127:Core/Src/main.c ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 578              		.loc 1 127 3 is_stmt 1 view .LVU152
 127:Core/Src/main.c ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 579              		.loc 1 127 41 is_stmt 0 view .LVU153
 580 0024 0894     		str	r4, [sp, #32]
 128:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 581              		.loc 1 128 3 is_stmt 1 view .LVU154
 128:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 582              		.loc 1 128 43 is_stmt 0 view .LVU155
 583 0026 0A94     		str	r4, [sp, #40]
 129:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 584              		.loc 1 129 3 is_stmt 1 view .LVU156
 129:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 585              		.loc 1 129 34 is_stmt 0 view .LVU157
 586 0028 0133     		adds	r3, r3, #1
 587 002a 0C93     		str	r3, [sp, #48]
 130:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 588              		.loc 1 130 3 is_stmt 1 view .LVU158
 131:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 589              		.loc 1 131 3 view .LVU159
 131:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
ARM GAS  C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s 			page 21


 590              		.loc 1 131 32 is_stmt 0 view .LVU160
 591 002c A023     		movs	r3, #160
 592 002e 9B03     		lsls	r3, r3, #14
 593 0030 0E93     		str	r3, [sp, #56]
 132:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 594              		.loc 1 132 3 is_stmt 1 view .LVU161
 133:Core/Src/main.c ****   {
 595              		.loc 1 133 3 view .LVU162
 133:Core/Src/main.c ****   {
 596              		.loc 1 133 7 is_stmt 0 view .LVU163
 597 0032 04A8     		add	r0, sp, #16
 598 0034 FFF7FEFF 		bl	HAL_RCC_OscConfig
 599              	.LVL28:
 133:Core/Src/main.c ****   {
 600              		.loc 1 133 6 view .LVU164
 601 0038 0028     		cmp	r0, #0
 602 003a 0ED1     		bne	.L33
 139:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 603              		.loc 1 139 3 is_stmt 1 view .LVU165
 139:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 604              		.loc 1 139 31 is_stmt 0 view .LVU166
 605 003c 0723     		movs	r3, #7
 606 003e 0093     		str	r3, [sp]
 141:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 607              		.loc 1 141 3 is_stmt 1 view .LVU167
 141:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 608              		.loc 1 141 34 is_stmt 0 view .LVU168
 609 0040 053B     		subs	r3, r3, #5
 610 0042 0193     		str	r3, [sp, #4]
 142:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 611              		.loc 1 142 3 is_stmt 1 view .LVU169
 142:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 612              		.loc 1 142 35 is_stmt 0 view .LVU170
 613 0044 0023     		movs	r3, #0
 614 0046 0293     		str	r3, [sp, #8]
 143:Core/Src/main.c **** 
 615              		.loc 1 143 3 is_stmt 1 view .LVU171
 143:Core/Src/main.c **** 
 616              		.loc 1 143 36 is_stmt 0 view .LVU172
 617 0048 0393     		str	r3, [sp, #12]
 145:Core/Src/main.c ****   {
 618              		.loc 1 145 3 is_stmt 1 view .LVU173
 145:Core/Src/main.c ****   {
 619              		.loc 1 145 7 is_stmt 0 view .LVU174
 620 004a 0121     		movs	r1, #1
 621 004c 6846     		mov	r0, sp
 622 004e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 623              	.LVL29:
 145:Core/Src/main.c ****   {
 624              		.loc 1 145 6 view .LVU175
 625 0052 0028     		cmp	r0, #0
 626 0054 03D1     		bne	.L34
 149:Core/Src/main.c **** 
 627              		.loc 1 149 1 view .LVU176
 628 0056 10B0     		add	sp, sp, #64
 629              		@ sp needed
 630 0058 10BD     		pop	{r4, pc}
ARM GAS  C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s 			page 22


 631              	.L33:
 135:Core/Src/main.c ****   }
 632              		.loc 1 135 5 is_stmt 1 view .LVU177
 633 005a FFF7FEFF 		bl	Error_Handler
 634              	.LVL30:
 635              	.L34:
 147:Core/Src/main.c ****   }
 636              		.loc 1 147 5 view .LVU178
 637 005e FFF7FEFF 		bl	Error_Handler
 638              	.LVL31:
 639              		.cfi_endproc
 640              	.LFE41:
 642              		.section	.text.main,"ax",%progbits
 643              		.align	1
 644              		.global	main
 645              		.syntax unified
 646              		.code	16
 647              		.thumb_func
 648              		.fpu softvfp
 650              	main:
 651              	.LFB40:
  70:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 652              		.loc 1 70 1 view -0
 653              		.cfi_startproc
 654              		@ Volatile: function does not return.
 655              		@ args = 0, pretend = 0, frame = 0
 656              		@ frame_needed = 0, uses_anonymous_args = 0
 657 0000 10B5     		push	{r4, lr}
 658              	.LCFI10:
 659              		.cfi_def_cfa_offset 8
 660              		.cfi_offset 4, -8
 661              		.cfi_offset 14, -4
  78:Core/Src/main.c **** 
 662              		.loc 1 78 3 view .LVU180
 663 0002 FFF7FEFF 		bl	HAL_Init
 664              	.LVL32:
  85:Core/Src/main.c **** 
 665              		.loc 1 85 3 view .LVU181
 666 0006 FFF7FEFF 		bl	SystemClock_Config
 667              	.LVL33:
  92:Core/Src/main.c ****   MX_ADC_Init();
 668              		.loc 1 92 3 view .LVU182
 669 000a FFF7FEFF 		bl	MX_GPIO_Init
 670              	.LVL34:
  93:Core/Src/main.c ****   MX_TIM1_Init();
 671              		.loc 1 93 3 view .LVU183
 672 000e FFF7FEFF 		bl	MX_ADC_Init
 673              	.LVL35:
  94:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 674              		.loc 1 94 3 view .LVU184
 675 0012 FFF7FEFF 		bl	MX_TIM1_Init
 676              	.LVL36:
  97:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim1);
 677              		.loc 1 97 3 view .LVU185
 678 0016 0348     		ldr	r0, .L37
 679 0018 FFF7FEFF 		bl	HAL_ADC_Start
 680              	.LVL37:
ARM GAS  C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s 			page 23


  98:Core/Src/main.c ****   /* USER CODE END 2 */
 681              		.loc 1 98 3 view .LVU186
 682 001c 0248     		ldr	r0, .L37+4
 683 001e FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 684              	.LVL38:
 685              	.L36:
 103:Core/Src/main.c ****   {
 686              		.loc 1 103 3 discriminator 1 view .LVU187
 108:Core/Src/main.c ****   /* USER CODE END 3 */
 687              		.loc 1 108 3 discriminator 1 view .LVU188
 103:Core/Src/main.c ****   {
 688              		.loc 1 103 9 discriminator 1 view .LVU189
 689 0022 FEE7     		b	.L36
 690              	.L38:
 691              		.align	2
 692              	.L37:
 693 0024 00000000 		.word	.LANCHOR0
 694 0028 00000000 		.word	.LANCHOR2
 695              		.cfi_endproc
 696              	.LFE40:
 698              		.global	adc2
 699              		.global	adc1
 700              		.global	htim1
 701              		.global	hadc
 702              		.section	.bss.adc1,"aw",%nobits
 703              		.align	2
 704              		.set	.LANCHOR1,. + 0
 707              	adc1:
 708 0000 00000000 		.space	4
 709              		.section	.bss.adc2,"aw",%nobits
 710              		.align	2
 713              	adc2:
 714 0000 00000000 		.space	4
 715              		.section	.bss.hadc,"aw",%nobits
 716              		.align	2
 717              		.set	.LANCHOR0,. + 0
 720              	hadc:
 721 0000 00000000 		.space	64
 721      00000000 
 721      00000000 
 721      00000000 
 721      00000000 
 722              		.section	.bss.htim1,"aw",%nobits
 723              		.align	2
 724              		.set	.LANCHOR2,. + 0
 727              	htim1:
 728 0000 00000000 		.space	72
 728      00000000 
 728      00000000 
 728      00000000 
 728      00000000 
 729              		.text
 730              	.Letext0:
 731              		.file 3 "c:\\users\\pclokcer\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-vscode\\@
 732              		.file 4 "c:\\users\\pclokcer\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-vscode\\@
 733              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f030x8.h"
 734              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
ARM GAS  C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s 			page 24


 735              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 736              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 737              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 738              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 739              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_adc.h"
 740              		.file 12 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 741              		.file 13 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim_ex.h"
 742              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 743              		.file 15 "<built-in>"
ARM GAS  C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s 			page 25


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s:16     .text.MX_GPIO_Init:0000000000000000 $t
C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s:23     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s:135    .text.MX_GPIO_Init:0000000000000070 $d
C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s:141    .text.erdem:0000000000000000 $t
C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s:148    .text.erdem:0000000000000000 erdem
C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s:175    .text.erdem:0000000000000010 $d
C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s:180    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s:187    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s:232    .text.HAL_TIM_PeriodElapsedCallback:000000000000001c $d
C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s:239    .text.Error_Handler:0000000000000000 $t
C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s:246    .text.Error_Handler:0000000000000000 Error_Handler
C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s:278    .text.MX_ADC_Init:0000000000000000 $t
C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s:284    .text.MX_ADC_Init:0000000000000000 MX_ADC_Init
C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s:400    .text.MX_ADC_Init:000000000000006c $d
C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s:406    .text.MX_TIM1_Init:0000000000000000 $t
C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s:412    .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s:523    .text.MX_TIM1_Init:0000000000000070 $d
C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s:531    .text.SystemClock_Config:0000000000000000 $t
C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s:538    .text.SystemClock_Config:0000000000000000 SystemClock_Config
C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s:643    .text.main:0000000000000000 $t
C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s:650    .text.main:0000000000000000 main
C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s:693    .text.main:0000000000000024 $d
C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s:713    .bss.adc2:0000000000000000 adc2
C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s:707    .bss.adc1:0000000000000000 adc1
C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s:727    .bss.htim1:0000000000000000 htim1
C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s:720    .bss.hadc:0000000000000000 hadc
C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s:703    .bss.adc1:0000000000000000 $d
C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s:710    .bss.adc2:0000000000000000 $d
C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s:716    .bss.hadc:0000000000000000 $d
C:\Users\PcLokcer\AppData\Local\Temp\cct9LLD0.s:723    .bss.htim1:0000000000000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_GPIO_TogglePin
HAL_ADC_GetValue
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_ADC_Start
HAL_TIM_Base_Start_IT
